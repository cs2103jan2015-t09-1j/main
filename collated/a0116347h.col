//@author: a0116347h



	/**
	 * origin: D:\Documents\Eclipse\omnitask\src\main\java\sg\edu\nus\cs2103t\omnitask\parser\Parser.java
	 */

public class Parser {

	private static final String[] DATE_INDICATORS = new String[] { "from",
			"by", "due", "on" };
	public static final String[] PRIORITY_INDICATORS = new String[] { "^n",
			"^l", "^m", "^h" };
/**
 * This function reads from user input, then parses the type of commands entered by user
 * and passes attributes contained within the input to CommandInput class for further
 * processing.
 * 
 * @param input 
 *             Input text from user
 * @return Command
 *             commandType and attributes to be processed
 */
	public Command parseUserInput(String input) {
		// TODO: Fix prototype implementation, need to think of the proper way
		// to parse text modularly
		String[] inputSplit = input.split(" ");

		// Get commandName from the first word in user input
		// TODO: Need SLAP?
		String commandName = inputSplit[0].toLowerCase();

		// Display command
		if (Utils.getCommandTypeFromString(commandName) == CommandType.SHOW) {
			CommandInput commandInput = new CommandInput(CommandType.SHOW);
			commandInput.setCommandType(CommandType.SHOW);

			extractDatesAndTaskNameFromCommand(1, inputSplit, commandInput,
					false);

			return new CommandDisplay(commandInput);
		}

		// Undo command
		if (Utils.getCommandTypeFromString(commandName) == CommandType.UNDO) {
			CommandInput commandInput = new CommandInput(CommandType.UNDO);
			commandInput.setCommandType(CommandType.UNDO);

			return new CommandUndo(commandInput);
		}

		// Re-do command
		if (Utils.getCommandTypeFromString(commandName) == CommandType.REDO) {
			CommandInput commandInput = new CommandInput(CommandType.REDO);
			commandInput.setCommandType(CommandType.REDO);

			return new CommandRedo(commandInput);
		}

		// Next command
		if (Utils.getCommandTypeFromString(commandName) == CommandType.NEXT) {
			CommandInput commandInput = new CommandInput(CommandType.NEXT);
			commandInput.setCommandType(CommandType.NEXT);

			return new CommandNext(commandInput);
		}

		// Prev command
		if (Utils.getCommandTypeFromString(commandName) == CommandType.PREV) {
			CommandInput commandInput = new CommandInput(CommandType.PREV);
			commandInput.setCommandType(CommandType.PREV);

			return new CommandPrev(commandInput);
		}

		// Exit command
		if (Utils.getCommandTypeFromString(commandName) == CommandType.EXIT) {
			CommandInput commandInput = new CommandInput(CommandType.EXIT);
			commandInput.setCommandType(CommandType.EXIT);

			return new CommandExit(commandInput);
		}

		// Delete command
		if (Utils.getCommandTypeFromString(commandName) == CommandType.DELETE) {
			CommandInput commandInput = new CommandInput(CommandType.DELETE);
			commandInput.setCommandType(CommandType.DELETE);

			long deleteId;
			try {
				deleteId = Long.parseLong(inputSplit[1]);
			} catch (NumberFormatException e) {
				return null;
			}
			commandInput.setId(deleteId);

			return new CommandDelete(commandInput);
		}

		// Mark command
		if (Utils.getCommandTypeFromString(commandName) == CommandType.MARK) {
			CommandInput commandInput = new CommandInput(CommandType.MARK);
			commandInput.setCommandType(CommandType.MARK);

			long markId;
			try {
				markId = Long.parseLong(inputSplit[1]);
			} catch (NumberFormatException e) {
				return null;
			}
			//invalid command if not specified done or undone
            if (inputSplit.length==2) {
            	return null;
            } else if (inputSplit[2].equalsIgnoreCase("done")) {
				commandInput.setCompleted(true);
			} else if (inputSplit[2].equalsIgnoreCase("undone")) {
				commandInput.setCompleted(false);
			} else {
				return null;
			}
			commandInput.setId(markId);

			return new CommandMark(commandInput);
		}

		// RemoveDate Command
		if (Utils.getCommandTypeFromString(commandName) == CommandType.REMOVEDATE) {
			CommandInput commandInput = new CommandInput(CommandType.REMOVEDATE);
			commandInput.setCommandType(CommandType.REMOVEDATE);

			long removeDateId;
			try {
				removeDateId = Long.parseLong(inputSplit[1]);
			} catch (NumberFormatException e) {
				return null;
			}

			commandInput.setId(removeDateId);

			return new CommandRemoveDate(commandInput);
		}

		// Add Command
		if (Utils.getCommandTypeFromString(commandName) == CommandType.ADD) {
			CommandInput commandInput = new CommandInput(CommandType.ADD);

			// detect if priority is specified by user
			detectPrio(inputSplit, commandInput, false);

			// parse dateTime within input string
			extractDatesAndTaskNameFromCommand(1, inputSplit, commandInput,
					false);

			return new CommandAdd(commandInput);
		}

		// Search Task Command
		if (Utils.getCommandTypeFromString(commandName) == CommandType.SEARCH) {
			CommandInput commandInput = new CommandInput(CommandType.SEARCH);
			commandInput.setCommandType(CommandType.SEARCH);

			if (inputSplit.length > 1) {
				commandInput.setName(joinStringArray(inputSplit, 1,
						inputSplit.length));
			}

			return new CommandSearch(commandInput);
		}

		// Storage Command
		if (Utils.getCommandTypeFromString(commandName) == CommandType.STORAGE) {
			CommandInput commandInput = new CommandInput(CommandType.STORAGE);
			commandInput.setCommandType(CommandType.STORAGE);

			if (inputSplit.length > 1)
				commandInput.setName(inputSplit[1]);

			return new CommandStorage(commandInput);
		}

		// Help Command
		if (Utils.getCommandTypeFromString(commandName) == CommandType.HELP) {
			CommandInput commandInput = new CommandInput(CommandType.HELP);
			commandInput.setCommandType(CommandType.HELP);

			if (inputSplit.length > 1)
				commandInput.setName(inputSplit[1]);

			return new CommandHelp(commandInput);
		}

		// Archive Command
		if (Utils.getCommandTypeFromString(commandName) == CommandType.ARCHIVE) {
			CommandInput commandInput = new CommandInput(CommandType.ARCHIVE);
			long updateId = -1;
			try {
				updateId = Long.parseLong(inputSplit[1]);
				commandInput.setId(updateId);
			} catch (NumberFormatException e) {
			}

			if (updateId == -1 && inputSplit.length > 1)
				commandInput.setName(inputSplit[1]);

			return new CommandArchive(commandInput);
		}

		// Unarchive Command
		if (Utils.getCommandTypeFromString(commandName) == CommandType.UNARCHIVE) {
			CommandInput commandInput = new CommandInput(CommandType.UNARCHIVE);
			long updateId = -1;
			try {
				updateId = Long.parseLong(inputSplit[1]);
				commandInput.setId(updateId);
			} catch (NumberFormatException e) {
				return null;
			}

			return new CommandUnarchive(commandInput);
		}

		// Edit Command
		if (Utils.getCommandTypeFromString(commandName) == CommandType.EDIT) {
			CommandInput commandInput = new CommandInput(CommandType.EDIT);
			long updateId;
			try {
				updateId = Long.parseLong(inputSplit[1]);
			} catch (NumberFormatException e) {
				return null;
			}
			commandInput.setId(updateId);

			// edit priority of task if detected
			detectPrio(inputSplit, commandInput, true);

			// edit time and name of task if detected within input string
			extractDatesAndTaskNameFromCommand(2, inputSplit, commandInput, true);

			return new CommandEdit(commandInput);

		}

		// base case, return null
		return null;
	}

	// Method to detect priority indicator within string input and remove it
	// from taskName
	/**
	 * This method checks though the user input for priority indicator, it will pass the 
	 * priority found to date class for editAttributes, if no priority is detected, it leaves 
	 * the field unchanged for editing and set it to none when adding
	 * 
	 * @param inputSplit  
	 *                  user input in String array
	 * @param commandInput
	 *                  commandInput 
	 * @param isEditing
	 *                  to check if the method is called by adding or editing algorithm
	 */
	private void detectPrio(String[] inputSplit, CommandInput commandInput,
			boolean isEditing) {
		int priorityIndex = 0;
		boolean prioritySent = false;

		// Detect for priority
		for (int j = 1; j < inputSplit.length; j++) {
			if (inArray(PRIORITY_INDICATORS, inputSplit[j])) {
				priorityIndex = j;
				if (inputSplit[j].equals(PRIORITY_INDICATORS[3])) {
					commandInput.setPriority(Priority.HIGH);
				} else if (inputSplit[j].equals(PRIORITY_INDICATORS[2])) {
					commandInput.setPriority(Priority.MEDIUM);
				} else if (inputSplit[j].equals(PRIORITY_INDICATORS[1])) {
					commandInput.setPriority(Priority.LOW);
				} else {
					commandInput.setPriority(Priority.NONE);
				}

				prioritySent = true;
				// remove priority after setting
				if (priorityIndex >= inputSplit.length - 1) {
					inputSplit[inputSplit.length - 1] = "";
				} else {
					for (int k = priorityIndex; k < inputSplit.length - 1; k++) {
						inputSplit[k] = inputSplit[k + 1];
					}
					inputSplit[inputSplit.length - 1] = "";
				}
				break;
			}
		}

		// set priority to none if not detected
		if (!isEditing && prioritySent == false) {
			commandInput.setPriority(Priority.NONE);
		}
	}

	// Parse the dateTime within the string input using natty
	/**
	 * This method checks the input from user for time indicator, when time indicator is found
	 * it will check the item after it if it is a date/time. Then it will pass the String 
	 * contains the date/time to natty and passes the returned date/time to editAttribute.
	 * And also set the taskName excluding the date/time String.
	 * 
	 * @param startIndex
	 *              index of the time indicator
	 * @param inputSplit
	 *              input String array
	 * @param commandInput
	 *              commandInput
	 * @param isEditing
	 *              to check if the method is called by adding or editing algorithm
	 */
	private void extractDatesAndTaskNameFromCommand(int startIndex,
			String[] inputSplit, CommandInput commandInput, boolean isEditing) {
		String taskName = "";

		boolean quoteDetected = false;

		for (int i = startIndex; i < inputSplit.length; i++) {
			// This first block of if conditions check for " symbol and if
			// found, don't use it in natty
			if (inputSplit[i].startsWith("\"") && inputSplit[i].endsWith("\"") && !inputSplit[i].endsWith("\\\"")) {
				quoteDetected = true;
			} else if (inputSplit[i].startsWith("\"")) {
				quoteDetected = true;
				inputSplit[i] = inputSplit[i].substring(1,
						inputSplit[i].length());
			} else if (quoteDetected && inputSplit[i].endsWith("\"") && !inputSplit[i].endsWith("\\\"")) {
				quoteDetected = false;
				inputSplit[i] = inputSplit[i].substring(0,
						inputSplit[i].length() - 1);
			}

			if (!quoteDetected && inArray(DATE_INDICATORS, inputSplit[i])) {
				String dateString = "";
				String ignored = "";

				// Similar to the outer if conditions block which checks for "
				// symbol
				// Repeated here because of possibility of having " symbol after
				// detecting the DATE_INDICATORS keywords
				// Any words to be ignored are placed in the ignored variable,
				// Any words to be passed to Natty into dateString variable
				for (int j = i; j < inputSplit.length; j++) {
					if (inputSplit[j].startsWith("\"")
							&& inputSplit[j].endsWith("\"")
							&& !inputSplit[j].endsWith("\\\"")) {
						quoteDetected = true;
					} else if (inputSplit[j].startsWith("\"")) {
						quoteDetected = true;
						ignored += inputSplit[j].substring(1,
								inputSplit[j].length())
								+ " ";
					} else if (quoteDetected && inputSplit[j].endsWith("\"") && !inputSplit[j].endsWith("\\\"") ) {
						quoteDetected = false;
						ignored += inputSplit[j].substring(0,
								inputSplit[j].length() - 1)
								+ " ";
					}

					if (quoteDetected && inputSplit[j].startsWith("\"")
							&& inputSplit[j].endsWith("\"")
							&& !inputSplit[j].endsWith("\\\"")) {
						ignored += inputSplit[j].substring(1,
								inputSplit[j].length() - 1)
								+ " ";
						quoteDetected = false;
					} else if (!quoteDetected) {
						dateString += inputSplit[j] + " ";
					}
				}

				// reset the variable back
				quoteDetected = false;

				// if there is something to parse, parse it with natty
				dateString = dateString.trim();

				if (!dateString.isEmpty()) {
					// Parse date using Natty
					com.joestelmach.natty.Parser parser = new com.joestelmach.natty.Parser();
					List<DateGroup> groups = parser.parse(dateString.trim());

					// If there is nothing parsed by Natty, it is probably part
					// of task name
					if (groups.size() == 0) {
						taskName += inputSplit[i] + " ";
						continue;
					}

					if (groups.size() > 0) {
						DateGroup group = groups.get(groups.size() - 1);
						// If there are 2 dates, means it's to and from
						// If no specific time is specified by user, set the
						// time to 00:00:00, retaining the dates
						if (group.getDates().size() == 2) {
							commandInput.setStartDate(new DateTime(group
									.getDates().get(0).getTime()));
							if (!isTimeSpecifiedByUser(group.getSyntaxTree()
									.getChild(0))) {
								commandInput.setStartDate(commandInput
										.getStartDate().withMillisOfDay(0));
							}

							commandInput.setEndDate(new DateTime(group
									.getDates().get(1).getTime()));
							if (!isTimeSpecifiedByUser(group.getSyntaxTree()
									.getChild(1))) {
								commandInput.setEndDate(commandInput
										.getEndDate().withMillisOfDay(0));
							}
						} else {
							commandInput.setEndDate(new DateTime(group
									.getDates().get(0).getTime()));
							if (!isTimeSpecifiedByUser(group.getSyntaxTree()
									.getChild(0))) {
								commandInput.setEndDate(commandInput
										.getEndDate().withMillisOfDay(0));
							}
						}

						// Put the string which is unused for parsing dates
						// before the ignored variable string
						String unusedDateString = dateString.substring(0,
								group.getPosition());
						String[] unusedDateStringSplit = unusedDateString
								.split(" ");
						ignored = joinStringArray(unusedDateStringSplit, 0,
								unusedDateStringSplit.length - 1)
								+ " "
								+ ignored;
					}
				}

				// Insert anything ignored as task name
				taskName += ignored + " ";

				break;
			}

			// If a single word was quoted, unquote it
			if (quoteDetected && inputSplit[i].startsWith("\"")
					&& inputSplit[i].endsWith("\"")) {
				inputSplit[i] = inputSplit[i].substring(1,
						inputSplit[i].length() - 1);
				quoteDetected = false;
			}

			// Insert anything not to be parsed by Natty as task name
			taskName += inputSplit[i] + " ";
		}
		
		// remove escaped quotes
		taskName = taskName.replaceAll("\\\\\"", "\"");

		commandInput.setName(taskName.trim());
	}

	// End of segment: D:\Documents\Eclipse\omnitask\src\main\java\sg\edu\nus\cs2103t\omnitask\parser\Parser.java





	/**
	 * origin: D:\Documents\Eclipse\omnitask\src\test\java\sg\edu\nus\cs2103t\omnitask\JUnitParserAtd.java
	 */

public class JUnitParserAtd {
	@Test
	public void TestParseUserInput() {
		Command command = null;
		
		// Test parsing of "add" and "task name" parameter
		command = parseUserInputHelper("add Hello");
		assertNotNull(command);
		assertEquals(command.getCommandInput().getCommandType(), CommandType.ADD);
		assertEquals(command.getCommandInput().getName(), "Hello");
		
		//Test parsing of "new" and "task name"
		command = parseUserInputHelper("new Hello");
		assertNotNull(command);
		assertEquals(command.getCommandInput().getCommandType(), CommandType.ADD);
		assertEquals(command.getCommandInput().getName(), "Hello");
		
		//Test parsing priority
		command = parseUserInputHelper("new Hello ^h");
		assertNotNull(command);
		assertEquals(command.getCommandInput().getCommandType(), CommandType.ADD);
		assertEquals(command.getCommandInput().getName(), "Hello");
		assertEquals(command.getCommandInput().getPriority(), Priority.HIGH);
		
		//Test parsing priority with dates
		command = parseUserInputHelper("add Hello ^l due 31 August 2015");
		assertNotNull(command);
		assertEquals(command.getCommandInput().getCommandType(), CommandType.ADD);
		assertEquals(command.getCommandInput().getName(), "Hello");
		assertEquals(command.getCommandInput().getEndDate().dayOfMonth().get(), 31);
		assertEquals(command.getCommandInput().getEndDate().monthOfYear().get(), 8);
		assertEquals(command.getCommandInput().getEndDate().year().get(), 2015);
		assertEquals(command.getCommandInput().getPriority(), Priority.LOW);
		
		// Test parsing of "add" and "task name", "due" parameter
		//This is also a test combining multiple inputs
		//commandType indicator + task name + dateTime indicator + dateTime
		command = parseUserInputHelper("add Hello due 31 August 2015");
		assertNotNull(command);
		assertEquals(command.getCommandInput().getCommandType(), CommandType.ADD);
		assertEquals(command.getCommandInput().getName(), "Hello");
		assertEquals(command.getCommandInput().getEndDate().dayOfMonth().get(), 31);
		assertEquals(command.getCommandInput().getEndDate().monthOfYear().get(), 8);
		assertEquals(command.getCommandInput().getEndDate().year().get(), 2015);
		
		//Test parsing of "add" and "task name", "by" parameter
		//day of month is expected to be 1-31
		//32 is a boundary value for testing
		command = parseUserInputHelper("add Hello by 29 August 2015");
		assertNotNull(command);
		assertEquals(command.getCommandInput().getCommandType(), CommandType.ADD);
		assertEquals(command.getCommandInput().getName(), "Hello");
		assertEquals(command.getCommandInput().getEndDate().dayOfMonth().get(), 29);
		assertEquals(command.getCommandInput().getEndDate().monthOfYear().get(), 8);
		assertEquals(command.getCommandInput().getEndDate().year().get(), 2015);
		
		//Test parsing of "add", "task name" and "on" parameter
		command = parseUserInputHelper("add Hello on 15 August 2015");
		assertNotNull(command);
		assertEquals(command.getCommandInput().getCommandType(), CommandType.ADD);
		assertEquals(command.getCommandInput().getName(), "Hello");
		assertEquals(command.getCommandInput().getEndDate().dayOfMonth().get(), 15);
		assertEquals(command.getCommandInput().getEndDate().monthOfYear().get(), 8);
		assertEquals(command.getCommandInput().getEndDate().year().get(), 2015);
		
		// Test parsing of "add" and "task name", "due" (relative date) parameter
		command = parseUserInputHelper("add Hello due tomorrow");
		assertNotNull(command);
		assertEquals(command.getCommandInput().getCommandType(), CommandType.ADD);
		assertEquals(command.getCommandInput().getName(), "Hello");
		assertEquals(command.getCommandInput().getEndDate().dayOfYear().get(), DateTime.now().plusDays(1).dayOfYear().get());
		
		// Test parsing of "add" and "task name", "from" (but not a date) and "on" parameter
		command = parseUserInputHelper("add Get something from Joe on 15 August 2015");
		assertNotNull(command);
		assertEquals(command.getCommandInput().getCommandType(), CommandType.ADD);
		assertEquals(command.getCommandInput().getName(), "Get something from Joe");
		assertEquals(command.getCommandInput().getEndDate().dayOfMonth().get(), 15);
		assertEquals(command.getCommandInput().getEndDate().monthOfYear().get(), 8);
		assertEquals(command.getCommandInput().getEndDate().year().get(), 2015);
		
		// Test parsing of "add" and "task name", with quotes (") to escape parsing of date
		command = parseUserInputHelper("add \"Get something from Joe on 15 August 2015\"");
		assertNotNull(command);
		assertEquals(command.getCommandInput().getCommandType(), CommandType.ADD);
		assertEquals(command.getCommandInput().getName(), "Get something from Joe on 15 August 2015");
		assertNull(command.getCommandInput().getEndDate());
		
		// Variation of above
		command = parseUserInputHelper("add Get something \"from Joe on 15 August 2015\"");
		assertNotNull(command);
		assertEquals(command.getCommandInput().getCommandType(), CommandType.ADD);
		assertEquals(command.getCommandInput().getName(), "Get something from Joe on 15 August 2015");
		assertNull(command.getCommandInput().getEndDate());
		
		// Another variation of above
		command = parseUserInputHelper("add Get something \"from Joe\" on 15 August 2015");
		assertNotNull(command);
		assertEquals(command.getCommandInput().getCommandType(), CommandType.ADD);
		assertEquals(command.getCommandInput().getName(), "Get something from Joe");
		assertEquals(command.getCommandInput().getEndDate().dayOfMonth().get(), 15);
		assertEquals(command.getCommandInput().getEndDate().monthOfYear().get(), 8);
		assertEquals(command.getCommandInput().getEndDate().year().get(), 2015);
		
		// Another variation of above
		command = parseUserInputHelper("add Get something from Joe on \"15 August 2015\"");
		assertNotNull(command);
		assertEquals(command.getCommandInput().getCommandType(), CommandType.ADD);
		assertEquals(command.getCommandInput().getName(), "Get something from Joe on 15 August 2015");
		assertNull(command.getCommandInput().getEndDate());
		
		// Test parsing of "add" and "task name", with quotes (") to escape parsing of date in between keyword in task name and actual date
		command = parseUserInputHelper("add Get something from \"Joe\" on 15 August 2015");
		assertNotNull(command);
		assertEquals(command.getCommandInput().getCommandType(), CommandType.ADD);
		assertEquals(command.getCommandInput().getName(), "Get something from Joe");
		assertEquals(command.getCommandInput().getEndDate().dayOfMonth().get(), 15);
		assertEquals(command.getCommandInput().getEndDate().monthOfYear().get(), 8);
		assertEquals(command.getCommandInput().getEndDate().year().get(), 2015);
	
	    //Test parsing of "delete" and "task index" parameter
		command = parseUserInputHelper("delete 1");
		assertNotNull(command);
		assertEquals(command.getCommandInput().getCommandType(), CommandType.DELETE);
		assertEquals(command.getCommandInput().getId(), 1);
		
		//Test parsing of "display" parameter
		command = parseUserInputHelper("display");
		assertNotNull(command);
		assertEquals(command.getCommandInput().getCommandType(), CommandType.SHOW);
		
		//Test parsing of "edit" and "task index" and "task name" parameter
		command = parseUserInputHelper("edit 1 Hello");
		assertNotNull(command);
		assertEquals(command.getCommandInput().getCommandType(), CommandType.EDIT);
		assertEquals(command.getCommandInput().getId(), 1);
		assertEquals(command.getCommandInput().getName(), "Hello");
		
		//Test parsing of "edit", "task index" and "due" parameter
		command = parseUserInputHelper("edit 1 due 15 August 2015");
		assertNotNull(command);
		assertEquals(command.getCommandInput().getCommandType(), CommandType.EDIT);
		assertEquals(command.getCommandInput().getId(), 1);
		assertEquals(command.getCommandInput().getEndDate().dayOfMonth().get(), 15);
		assertEquals(command.getCommandInput().getEndDate().monthOfYear().get(), 8);
		assertEquals(command.getCommandInput().getEndDate().year().get(), 2015);
		
		//Test parsing of "exit" parameter
		command = parseUserInputHelper("exit");
		assertNotNull(command);
		assertEquals(command.getCommandInput().getCommandType(), CommandType.EXIT);
		
		//Test parsing of "search" and "search content"
		command = parseUserInputHelper("search Hello");
		assertNotNull(command);
		assertEquals(command.getCommandInput().getCommandType(), CommandType.SEARCH);
		assertEquals(command.getCommandInput().getName(), "Hello");
		//Equivalent partition [add],[delete],[display],[edit],[exit] and [search]
	}
	
	private Command parseUserInputHelper(String input) {
		Parser parser = new Parser();
		return parser.parseUserInput(input);
	}
}
	// End of segment: D:\Documents\Eclipse\omnitask\src\test\java\sg\edu\nus\cs2103t\omnitask\JUnitParserAtd.java





	/**
	 * origin: D:\Documents\Eclipse\omnitask\src\test\java\sg\edu\nus\cs2103t\omnitask\JUnitParserAtd.java
	 */


	// End of segment: D:\Documents\Eclipse\omnitask\src\test\java\sg\edu\nus\cs2103t\omnitask\JUnitParserAtd.java





